/*
 * Copyright (C) 2015-2017 Pascal Gauthier.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 * The code is based on ppplay https://github.com/stohrendorf/ppplay and opl3
 * math documentation :
 * https://github.com/gtaylormb/opl3_fpga/blob/master/docs/opl3math/opl3math.pdf
 *
 */

#include "EngineMkI.h"
#define _USE_MATH_DEFINES
#include <cmath>
#include <cstdlib>

#include "sin.h"
#include "exp2.h"

#ifdef DEBUG
    #include "time.h"
    //#define MKIDEBUG
#endif

#ifdef _WIN32
#if _MSC_VER < 1800
    double log2(double n)  {  
        return log(n) / log(2.0);  
    }
    double round(double n) {
        return n < 0.0 ? ceil(n - 0.5) : floor(n + 0.5);
    }
#endif
    __declspec(align(16)) const int zeros[N] = {0};
#else
    const int32_t __attribute__ ((aligned(16))) zeros[N] = {0};
#endif

static const uint16_t NEGATIVE_BIT = 0x8000;
static const uint16_t ENV_BITDEPTH = 14;

static const uint16_t SINLOG_BITDEPTH = 10;
static const uint16_t SINLOG_TABLESIZE = 1<<SINLOG_BITDEPTH;
extern const uint16_t sinLogTable[];

static const uint16_t SINEXP_BITDEPTH = 10;
static const uint16_t SINEXP_TABLESIZE = 1<<SINEXP_BITDEPTH;
extern const uint16_t sinExpTable[];

const uint16_t ENV_MAX = 1<<ENV_BITDEPTH;

const uint16_t sinLogTable[] = {
6168,0,6659,6168,7153,12827,7645,19980,8139,27625,
8633,35764,9126,44397,9621,53523,10115,63144,10611,7723,
11106,18334,11601,29440,12097,41041,12594,53138,13090,196,
13588,13286,14085,26874,14582,40959,15080,55541,15579,5085,
16078,20664,16576,36742,17076,53318,17576,4858,18075,22434,
18576,40509,19077,59085,19578,12626,20079,32204,20581,52283,
21083,7328,21585,28411,22089,49996,22591,6549,23094,29140,
23599,52234,24103,10297,24607,34400,25111,59007,25617,18582,
26123,44199,26628,4786,27135,31414,27641,58549,28148,20654,
28655,48802,29162,11921,29671,41083,30179,5218,30687,35397,
31196,548,31706,31744,32215,63450,32725,30129,33235,62854,
33746,30553,34257,64299,34768,33020,35280,2252,35792,37532,
36305,7788,36817,44093,37330,15374,37844,52704,38357,25012,
38872,63369,39386,36705,39901,10555,40416,50456,40931,25336,
41447,731,41964,42178,42480,18606,42997,61086,43514,38547,
44032,16525,44550,60557,45068,39571,45587,19103,46105,64690,
46625,45259,47145,26348,47665,7957,48185,55622,48707,38271,
49227,21442,49748,5133,50271,54881,50793,39616,51315,24873,
51838,10652,52361,62490,52885,49315,53409,36664,53933,24537,
54458,12934,54983,1856,55508,56839,56034,46811,56560,37309,
57087,28333,57613,19884,58141,11961,58668,4566,59196,63234,
59724,56894,60252,51082,60782,45798,61311,41044,61840,36819,
62371,33123,62901,29958,63431,27323,63963,25218,64494,23645,
65026,22603,22,22093,555,22115,1088,22670,1621,23758,
2154,25379,2689,27533,3222,30222,3758,33444,4292,37202,
4828,41494,5364,46322,5900,51686,6436,57586,6974,64022,
7510,5460,8048,12970,8586,21018,9125,29604,9663,38729,
10202,48392,10742,58594,11281,3800,11822,15081,12362,26903,
12903,39265,13444,52168,13986,76,14528,14062,15070,28590,
15613,43660,16156,59273,16699,9893,17244,26592,17787,43836,
18332,61623,18877,14419,19422,33296,19968,52718,20514,7150,
21061,27664,21607,48725,22154,4796,22702,26950,23250,49652,
23798,7366,24346,31164,24896,55510,25445,14870,25995,40315,
26544,774,27096,27318,27646,54414,28197,16524,28749,44721,
29301,7934,29854,37235,30406,1553,30959,31959,31513,62918,
32067,28895,32620,60962,33176,28046,33730,61222,34286,29416,
34841,63702,35398,33007,35954,2869,36511,38823,37068,9798,
37626,46866,38184,18956,38742,57140,39301,30346,39860,4111,
40419,43971,40980,18854,41540,59834,42100,35838,42661,12402,
43223,55063,43785,32750,44346,10999,44910,55345,45472,34719,
46035,14655,46599,60690,47164,41753,47727,23381,48293,5572,
48858,53865,49423,37187,49990,21074,50555,5528,51123,56083,
51689,41670,52257,27823,52825,14544,53394,1833,53962,55227,
54531,43653,55100,32648,55671,22212,56240,12347,56811,3051,
57382,59862,57954,51708,58525,44126,59097,37115,59670,30676,
60243,24810,60816,19517,61390,14797,61964,10651,62539,7079,
63113,4082,63688,1659,64265,65347,64840,64076,65416,63380,
458,63260,1035,63718,1612,64753,2190,829,2769,3019,
3347,5788,3926,9135,4507,13061,5086,17568,5666,22654,
6247,28320,6828,34567,7410,41395,7992,48805,8574,56797,
9156,65371,9740,8991,10323,18731,10907,29054,11492,39961,
12076,51453,12661,63529,13247,10654,13832,23901,14419,37733,
15005,52152,15593,1621,16179,17214,16768,33393,17356,50161,
17945,1981,18534,19926,19123,38460,19713,57583,20303,11760,
20894,32063,21485,52957,22076,8906,22668,30982,23260,53650,
23854,11374,24446,35228,25039,59674,25634,19177,26227,44811,
26823,5502,27417,32325,28013,59742,28608,22219,29205,50827,
29802,14496,30399,44298,30996,9161,31594,40157,32192,6215,
32791,38407,33390,5662,33990,39052,34590,7506,35190,42096,
35790,11750,36392,47540,36993,18396,37595,55389,38198,27448,
38800,110,39404,38910,40007,12778,40611,52785,41215,27860,
41820,3539,42426,45359,43031,22249,43637,65280,44243,43381,
44851,22088,45457,1403,46066,46860,46673,27390,47282,8527,
47891,55809,48500,38164,49110,21128,49720,4702,50330,54422,
50942,39216,51553,24622,52164,10639,52777,62803,53390,50044,
54003,37898,54616,26365,55230,15445,55844,5139,56459,60983,
57074,51906,57690,43444,58305,35598,58922,28367,59539,21753,
60156,15756,60773,10376,61392,5613,62010,1469,62629,63479,
63248,60572,63868,58284,64489,56616,65108,55569,194,55141,
815,55335,1437,56150,2059,57587,2682,59646,3305,62328,
3928,97,4553,4025,5176,8578,5802,13754,6426,19556,
7053,25982,7678,33035,8305,40713,8931,49018,9559,57949,
10187,1972,10815,12159,11444,22974,12072,34418,12702,46490,
13332,59192,13962,6988,14593,20950,15224,35543,15856,50767,
16487,1087,17120,17574,17753,34694,18386,52447,19020,5297,
19654,24317,20289,43971,20924,64260,21559,19648,22195,41207,
22831,63402,23468,20697,24105,44165,24743,2734,25381,27477,
26019,52858,26658,13341,27297,39999,27938,1760,28577,29698,
29218,58275,29859,21957,30501,51816,31142,16781,31785,47923,
32427,14172,33071,46599,33715,14134,34358,47849,35003,16671,
35649,51674,36293,21787,36939,58080,37586,29483,38232,1533,
38880,39765,39527,13109,40175,52636,40824,27275,41472,2563,
42122,44035,42772,20621,43422,63393,44072,41279,44724,19815,
45375,64539,46028,44378,46679,24870,47333,6013,47986,53346,
48640,35796,49293,18900,49949,2657,50603,52606,51260,37673,
51915,23397,52571,9776,53229,62347,53885,50040,54544,38389,
55202,27397,55860,17063,56519,7387,57179,63906,57839,55549,
58500,47852,59160,40816,59821,34440,60484,28725,61145,23673,
61809,19282,62471,15555,63135,12490,63799,10089,64463,8352,
65129,7279,258,6872,923,7130,1590,8053,2257,9643,
2923,11900,3592,14823,4259,18415,4928,22674,5597,27602,
6266,33199,6937,39465,7606,46402,8278,54008,8948,62286,
9621,5698,10292,15319,10965,25611,11639,36576,12311,48215,
12986,60526,13660,7976,14335,21636,15011,35971,15686,50982,
16363,1132,17039,17495,17716,34534,18394,52250,19072,5108,
19751,24180,20430,43931,21109,64361,21789,19934,22470,41723,
23150,64193,23832,21807,24514,45639,25195,4617,25879,29812,
26562,55691,27245,16717,27929,43962,28614,6355,29299,34969,
29985,64268,30670,28717,31357,59387,32043,25208,32731,57251,
33419,24446,34107,57865,34796,26436,35485,61232,36175,31181,
36865,1820,37556,38685,38246,10705,38938,48951,39630,22353,
40323,61983,41015,36770,41709,12249,42403,53958,43098,30825,
43792,8387,44487,52179};


const uint16_t sinExpTable[] = {
6168,0,6659,6168,7153,12827,7645,19980,8139,27625,
8633,35764,9126,44397,9621,53523,10115,63144,10611,7723,
11106,18334,11601,29440,12097,41041,12594,53138,13090,196,
13588,13286,14085,26874,14582,40959,15080,55541,15579,5085,
16078,20664,16576,36742,17076,53318,17576,4858,18075,22434,
18576,40509,19077,59085,19578,12626,20079,32204,20581,52283,
21083,7328,21585,28411,22089,49996,22591,6549,23094,29140,
23599,52234,24103,10297,24607,34400,25111,59007,25617,18582,
26123,44199,26628,4786,27135,31414,27641,58549,28148,20654,
28655,48802,29162,11921,29671,41083,30179,5218,30687,35397,
31196,548,31706,31744,32215,63450,32725,30129,33235,62854,
33746,30553,34257,64299,34768,33020,35280,2252,35792,37532,
36305,7788,36817,44093,37330,15374,37844,52704,38357,25012,
38872,63369,39386,36705,39901,10555,40416,50456,40931,25336,
41447,731,41964,42178,42480,18606,42997,61086,43514,38547,
44032,16525,44550,60557,45068,39571,45587,19103,46105,64690,
46625,45259,47145,26348,47665,7957,48185,55622,48707,38271,
49227,21442,49748,5133,50271,54881,50793,39616,51315,24873,
51838,10652,52361,62490,52885,49315,53409,36664,53933,24537,
54458,12934,54983,1856,55508,56839,56034,46811,56560,37309,
57087,28333,57613,19884,58141,11961,58668,4566,59196,63234,
59724,56894,60252,51082,60782,45798,61311,41044,61840,36819,
62371,33123,62901,29958,63431,27323,63963,25218,64494,23645,
65026,22603,22,22093,555,22115,1088,22670,1621,23758,
2154,25379,2689,27533,3222,30222,3758,33444,4292,37202,
4828,41494,5364,46322,5900,51686,6436,57586,6974,64022,
7510,5460,8048,12970,8586,21018,9125,29604,9663,38729,
10202,48392,10742,58594,11281,3800,11822,15081,12362,26903,
12903,39265,13444,52168,13986,76,14528,14062,15070,28590,
15613,43660,16156,59273,16699,9893,17244,26592,17787,43836,
18332,61623,18877,14419,19422,33296,19968,52718,20514,7150,
21061,27664,21607,48725,22154,4796,22702,26950,23250,49652,
23798,7366,24346,31164,24896,55510,25445,14870,25995,40315,
26544,774,27096,27318,27646,54414,28197,16524,28749,44721,
29301,7934,29854,37235,30406,1553,30959,31959,31513,62918,
32067,28895,32620,60962,33176,28046,33730,61222,34286,29416,
34841,63702,35398,33007,35954,2869,36511,38823,37068,9798,
37626,46866,38184,18956,38742,57140,39301,30346,39860,4111,
40419,43971,40980,18854,41540,59834,42100,35838,42661,12402,
43223,55063,43785,32750,44346,10999,44910,55345,45472,34719,
46035,14655,46599,60690,47164,41753,47727,23381,48293,5572,
48858,53865,49423,37187,49990,21074,50555,5528,51123,56083,
51689,41670,52257,27823,52825,14544,53394,1833,53962,55227,
54531,43653,55100,32648,55671,22212,56240,12347,56811,3051,
57382,59862,57954,51708,58525,44126,59097,37115,59670,30676,
60243,24810,60816,19517,61390,14797,61964,10651,62539,7079,
63113,4082,63688,1659,64265,65347,64840,64076,65416,63380,
458,63260,1035,63718,1612,64753,2190,829,2769,3019,
3347,5788,3926,9135,4507,13061,5086,17568,5666,22654,
6247,28320,6828,34567,7410,41395,7992,48805,8574,56797,
9156,65371,9740,8991,10323,18731,10907,29054,11492,39961,
12076,51453,12661,63529,13247,10654,13832,23901,14419,37733,
15005,52152,15593,1621,16179,17214,16768,33393,17356,50161,
17945,1981,18534,19926,19123,38460,19713,57583,20303,11760,
20894,32063,21485,52957,22076,8906,22668,30982,23260,53650,
23854,11374,24446,35228,25039,59674,25634,19177,26227,44811,
26823,5502,27417,32325,28013,59742,28608,22219,29205,50827,
29802,14496,30399,44298,30996,9161,31594,40157,32192,6215,
32791,38407,33390,5662,33990,39052,34590,7506,35190,42096,
35790,11750,36392,47540,36993,18396,37595,55389,38198,27448,
38800,110,39404,38910,40007,12778,40611,52785,41215,27860,
41820,3539,42426,45359,43031,22249,43637,65280,44243,43381,
44851,22088,45457,1403,46066,46860,46673,27390,47282,8527,
47891,55809,48500,38164,49110,21128,49720,4702,50330,54422,
50942,39216,51553,24622,52164,10639,52777,62803,53390,50044,
54003,37898,54616,26365,55230,15445,55844,5139,56459,60983,
57074,51906,57690,43444,58305,35598,58922,28367,59539,21753,
60156,15756,60773,10376,61392,5613,62010,1469,62629,63479,
63248,60572,63868,58284,64489,56616,65108,55569,194,55141,
815,55335,1437,56150,2059,57587,2682,59646,3305,62328,
3928,97,4553,4025,5176,8578,5802,13754,6426,19556,
7053,25982,7678,33035,8305,40713,8931,49018,9559,57949,
10187,1972,10815,12159,11444,22974,12072,34418,12702,46490,
13332,59192,13962,6988,14593,20950,15224,35543,15856,50767,
16487,1087,17120,17574,17753,34694,18386,52447,19020,5297,
19654,24317,20289,43971,20924,64260,21559,19648,22195,41207,
22831,63402,23468,20697,24105,44165,24743,2734,25381,27477,
26019,52858,26658,13341,27297,39999,27938,1760,28577,29698,
29218,58275,29859,21957,30501,51816,31142,16781,31785,47923,
32427,14172,33071,46599,33715,14134,34358,47849,35003,16671,
35649,51674,36293,21787,36939,58080,37586,29483,38232,1533,
38880,39765,39527,13109,40175,52636,40824,27275,41472,2563,
42122,44035,42772,20621,43422,63393,44072,41279,44724,19815,
45375,64539,46028,44378,46679,24870,47333,6013,47986,53346,
48640,35796,49293,18900,49949,2657,50603,52606,51260,37673,
51915,23397,52571,9776,53229,62347,53885,50040,54544,38389,
55202,27397,55860,17063,56519,7387,57179,63906,57839,55549,
58500,47852,59160,40816,59821,34440,60484,28725,61145,23673,
61809,19282,62471,15555,63135,12490,63799,10089,64463,8352,
65129,7279,258,6872,923,7130,1590,8053,2257,9643,
2923,11900,3592,14823,4259,18415,4928,22674,5597,27602,
6266,33199,6937,39465,7606,46402,8278,54008,8948,62286,
9621,5698,10292,15319,10965,25611,11639,36576,12311,48215,
12986,60526,13660,7976,14335,21636,15011,35971,15686,50982,
16363,1132,17039,17495,17716,34534,18394,52250,19072,5108,
19751,24180,20430,43931,21109,64361,21789,19934,22470,41723,
23150,64193,23832,21807,24514,45639,25195,4617,25879,29812,
26562,55691,27245,16717,27929,43962,28614,6355,29299,34969,
29985,64268,30670,28717,31357,59387,32043,25208,32731,57251,
33419,24446,34107,57865,34796,26436,35485,61232,36175,31181,
36865,1820,37556,38685,38246,10705,38938,48951,39630,22353,
40323,61983,41015,36770,41709,12249,42403,53958,43098,30825,
43792,8387,44487,52179};


static inline uint16_t sinLog(uint16_t phi) {
    const uint16_t SINLOG_TABLEFILTER = SINLOG_TABLESIZE-1;
    const uint16_t index = (phi & SINLOG_TABLEFILTER);
    
    switch( ( phi & (SINLOG_TABLESIZE * 3) ) ) {
        case 0:
            return sinLogTable[index];
        case SINLOG_TABLESIZE:
            return sinLogTable[index ^ SINLOG_TABLEFILTER];
        case SINLOG_TABLESIZE * 2 :
            return sinLogTable[index] | NEGATIVE_BIT;
        default:
            return sinLogTable[index ^ SINLOG_TABLEFILTER] | NEGATIVE_BIT;
    }
}

EngineMkI::EngineMkI() {
    
#ifdef MKIDEBUG
    char buffer[4096];
    int pos = 0;
    
    TRACE("****************************************");
    for(int i=0;i<SINLOG_TABLESIZE;i++) {
        pos += sprintf(buffer+pos, "%d ", sinLogTable[i]);
        if ( pos > 90 ) {
            TRACE("SINLOGTABLE: %s" ,buffer);
            buffer[0] = 0;
            pos = 0;
        }
    }
    TRACE("SINLOGTABLE: %s", buffer);
    buffer[0] = 0;
    pos = 0;
    TRACE("----------------------------------------");    
    for(int i=0;i<SINEXP_TABLESIZE;i++) {
        pos += sprintf(buffer+pos, "%d ", sinExpTable[i]);
        if ( pos > 90 ) {
            TRACE("SINEXTTABLE: %s" ,buffer);
            buffer[0] = 0;
            pos = 0;
        }
    }
    TRACE("SINEXTTABLE: %s", buffer);
    TRACE("****************************************");
#endif
}

inline int32_t mkiSin(int32_t phase, uint16_t env) {
    uint16_t expVal = sinLog(phase >> (22 - SINLOG_BITDEPTH)) + (env);
    //int16_t expValShow = expVal;
    
    const bool isSigned = expVal & NEGATIVE_BIT;
    expVal &= ~NEGATIVE_BIT;
    
    const uint16_t SINEXP_FILTER = 0x3FF;
    uint16_t result = 4096 + sinExpTable[( expVal & SINEXP_FILTER ) ^ SINEXP_FILTER];
    
    //uint16_t resultB4 = result;
    result >>= ( expVal >> 10 ); // exp
    
#ifdef MKIDEBUG
    if ( ( time(NULL) % 5 ) == 0 ) {
        if ( expValShow < 0 ) {
            expValShow = (expValShow + 0x7FFF) * -1;
        }
        //TRACE(",%d,%d,%d,%d,%d,%d", phase >> (22 - SINLOG_BITDEPTH), env, expValShow, ( expVal & SINEXP_FILTER ) ^ SINEXP_FILTER, resultB4, result);
    }
#endif
    
    if( isSigned )
        return (-result - 1) << 13;
    else
        return result << 13;
}

void EngineMkI::compute(int32_t *output, const int32_t *input,
                        int32_t phase0, int32_t freq,
                        int32_t gain1, int32_t gain2, bool add) {
    int32_t dgain = (gain2 - gain1 + (N >> 1)) >> LG_N;
    int32_t gain = gain1;
    int32_t phase = phase0;
    const int32_t *adder = add ? output : zeros;
    
    for (int i = 0; i < N; i++) {
        gain += dgain;
        int32_t y = mkiSin((phase+input[i]), gain);
        output[i] = y + adder[i];
        phase += freq;
    }
    
}

void EngineMkI::compute_pure(int32_t *output, int32_t phase0, int32_t freq,
                             int32_t gain1, int32_t gain2, bool add) {
    int32_t dgain = (gain2 - gain1 + (N >> 1)) >> LG_N;
    int32_t gain = gain1;
    int32_t phase = phase0;
    const int32_t *adder = add ? output : zeros;
    
    for (int i = 0; i < N; i++) {
        gain += dgain;
        int32_t y = mkiSin(phase , gain);
        output[i] = y + adder[i];
        phase += freq;
    }
}

void EngineMkI::compute_fb(int32_t *output, int32_t phase0, int32_t freq,
                           int32_t gain1, int32_t gain2,
                           int32_t *fb_buf, int fb_shift, bool add) {
    int32_t dgain = (gain2 - gain1 + (N >> 1)) >> LG_N;
    int32_t gain = gain1;
    int32_t phase = phase0;
    const int32_t *adder = add ? output : zeros;
    int32_t y0 = fb_buf[0];
    int32_t y = fb_buf[1];
    
    for (int i = 0; i < N; i++) {
        gain += dgain;
        int32_t scaled_fb = (y0 + y) >> (fb_shift + 1);
        y0 = y;
        y = mkiSin((phase+scaled_fb), gain);
        output[i] = y + adder[i];
        phase += freq;
    }
    
    fb_buf[0] = y0;
    fb_buf[1] = y;
}

// exclusively used for ALGO 6 with feedback
void EngineMkI::compute_fb2(int32_t *output, FmOpParams *parms, int32_t gain01, int32_t gain02, int32_t *fb_buf, int fb_shift) {
    int32_t dgain[2];
    int32_t gain[2];
    int32_t phase[2];
    int32_t y0 = fb_buf[0];
    int32_t y = fb_buf[1];
    
    phase[0] = parms[0].phase;
    phase[1] = parms[1].phase;

    parms[1].gain_out = (ENV_MAX-(parms[1].level_in >> (28-ENV_BITDEPTH)));

    gain[0] = gain01;
    gain[1] = parms[1].gain_out == 0 ? (ENV_MAX-1) : parms[1].gain_out;

    dgain[0] = (gain02 - gain01 + (N >> 1)) >> LG_N;
    dgain[1] = (parms[1].gain_out - (parms[1].gain_out == 0 ? (ENV_MAX-1) : parms[1].gain_out));
    
    for (int i = 0; i < N; i++) {
        int32_t scaled_fb = (y0 + y) >> (fb_shift + 1);
        
        // op 0
        gain[0] += dgain[0];
        y0 = y;
        y = mkiSin(phase[0]+scaled_fb, gain[0]);
        phase[0] += parms[0].freq;
        
        // op 1
        gain[1] += dgain[1];
        y = mkiSin(phase[1]+y, gain[1]);
        phase[1] += parms[1].freq;
        
        output[i] = y;
    }
    fb_buf[0] = y0;
    fb_buf[1] = y;
}

// exclusively used for ALGO 4 with feedback
void EngineMkI::compute_fb3(int32_t *output, FmOpParams *parms, int32_t gain01, int32_t gain02, int32_t *fb_buf, int fb_shift) {
    int32_t dgain[3];
    int32_t gain[3];
    int32_t phase[3];
    int32_t y0 = fb_buf[0];
    int32_t y = fb_buf[1];
    
    phase[0] = parms[0].phase;
    phase[1] = parms[1].phase;
    phase[2] = parms[2].phase;
    
    parms[1].gain_out = (ENV_MAX-(parms[1].level_in >> (28-ENV_BITDEPTH)));
    parms[2].gain_out = (ENV_MAX-(parms[2].level_in >> (28-ENV_BITDEPTH)));
    
    gain[0] = gain01;
    gain[1] = parms[1].gain_out == 0 ? (ENV_MAX-1) : parms[1].gain_out;
    gain[2] = parms[2].gain_out == 0 ? (ENV_MAX-1) : parms[2].gain_out;

    dgain[0] = (gain02 - gain01 + (N >> 1)) >> LG_N;
    dgain[1] = (parms[1].gain_out - (parms[1].gain_out == 0 ? (ENV_MAX-1) : parms[1].gain_out));
    dgain[2] = (parms[2].gain_out - (parms[2].gain_out == 0 ? (ENV_MAX-1) : parms[2].gain_out));
    
    
    for (int i = 0; i < N; i++) {
        int32_t scaled_fb = (y0 + y) >> (fb_shift + 1);
        
        // op 0
        gain[0] += dgain[0];
        y0 = y;
        y = mkiSin(phase[0]+scaled_fb, gain[0]);
        phase[0] += parms[0].freq;
        
        // op 1
        gain[1] += dgain[1];
        y = mkiSin(phase[1]+y, gain[1]);
        phase[1] += parms[1].freq;
        
        // op 2
        gain[2] += dgain[2];
        y = mkiSin(phase[2]+y, gain[2]);
        phase[2] += parms[2].freq;
        
        output[i] = y;
    }
    fb_buf[0] = y0;
    fb_buf[1] = y;
}

void EngineMkI::render(int32_t *output, FmOpParams *params, int algorithm, int32_t *fb_buf, int feedback_shift) {
    const int kLevelThresh = ENV_MAX-100;
    FmAlgorithm alg = algorithms[algorithm];
    bool has_contents[3] = { true, false, false };
    bool fb_on = feedback_shift < 16;

    switch(algorithm) {
        case 3 : case 5 :
            if ( fb_on )
                alg.ops[0] = 0xc4;
    }
    
    for (int op = 0; op < 6; op++) {
        int flags = alg.ops[op];
        bool add = (flags & OUT_BUS_ADD) != 0;
        FmOpParams &param = params[op];
        int inbus = (flags >> 4) & 3;
        int outbus = flags & 3;
        int32_t *outptr = (outbus == 0) ? output : buf_[outbus - 1].get();
        int32_t gain1 = param.gain_out == 0 ? (ENV_MAX-1) : param.gain_out;
        int32_t gain2 = ENV_MAX-(param.level_in >> (28-ENV_BITDEPTH));
        param.gain_out = gain2;
        
        if (gain1 <= kLevelThresh || gain2 <= kLevelThresh) {
            
            if (!has_contents[outbus]) {
                add = false;
            }
            
            if (inbus == 0 || !has_contents[inbus]) {
                // PG: this is my 'dirty' implementation of FB for 2 and 3 operators...
                if ((flags & 0xc0) == 0xc0 && fb_on) {
                    switch ( algorithm ) {
                        // three operator feedback, process exception for ALGO 4
                        case 3 :
                            compute_fb3(outptr, params, gain1, gain2, fb_buf, min((feedback_shift+2), 16));
                            params[1].phase += params[1].freq << LG_N; // hack, we already processed op-5 - op-4
                            params[2].phase += params[2].freq << LG_N; // yuk yuk
                            op += 2; // ignore the 2 other operators
                            break;
                        // two operator feedback, process exception for ALGO 6
                        case 5 :
                            compute_fb2(outptr, params, gain1, gain2, fb_buf, min((feedback_shift+2), 16));
                            params[1].phase += params[1].freq << LG_N;  // yuk, hack, we already processed op-5
                            op++; // ignore next operator;
                            break;
                        default:
                            // one operator feedback, normal proces
                            compute_fb(outptr, param.phase, param.freq, gain1, gain2, fb_buf, feedback_shift, add);
                            break;
                    }
                } else {
                    compute_pure(outptr, param.phase, param.freq, gain1, gain2, add);
                }
            } else {
                compute(outptr, buf_[inbus - 1].get(), param.phase, param.freq, gain1, gain2, add);
            }
            
            has_contents[outbus] = true;
        } else if (!add) {
            has_contents[outbus] = false;
        }
        param.phase += param.freq << LG_N;
    }
}

